# -*- coding: utf-8 -*-
"""Pandas的基本操作.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IolW9RUrR2lGOeoFZQfq67jgxy6NYBgZ
"""

import pandas as pd
import numpy as np

'''
    https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.reset_index.html
'''


def reset_index():
    '''
                 class  max_speed
        falcon    bird      389.0
        parrot    bird       24.0
        lion    mammal       80.5
        monkey  mammal        NaN
    '''
    df = pd.DataFrame([('bird', 389.0),
                       ('bird', 24.0),
                       ('mammal', 80.5),
                       ('mammal', np.nan)],
                      index=['falcon', 'parrot', 'lion', 'monkey'],
                      columns=('class', 'max_speed'))
    print(df)
    '''
        When we reset the index, the old index is added as a column, and a new sequential index is used:
        
            index   class  max_speed
        0  falcon    bird      389.0
        1  parrot    bird       24.0
        2    lion  mammal       80.5
        3  monkey  mammal        NaN
    '''
    new_df = df.reset_index()
    print(new_df)

    '''
        We can use the drop parameter to avoid the old index being added as a column:
        
            class  max_speed
        0    bird      389.0
        1    bird       24.0
        2  mammal       80.5
        3  mammal        NaN
    '''

    new_df2 = df.reset_index(drop=True)
    print(new_df2)


def shape():
    input_data = 'Resources/host_health.csv'
    df = pd.read_csv(input_data, lineterminator='\n')
    print(f"row count:{df.shape[0]}, column count:{df.shape[1]}")  # row count:3549, column count:6


'''
找出所有unique
'''


def unique():
    input_data = 'Resources/host_health.csv'
    df = pd.read_csv(input_data, lineterminator='\n')
    unique_host_name_list = list(df['Host Name'].unique())
    # 21
    print(len(unique_host_name_list))
    # ['FSM-GFU-Window2012R2-WIN2012R2-172-30-56-123', 'ussvnplesx54.fortinet-us.com', 'ussvnplesx58.fortinet-us.com', 'ussvnplesx56.fortinet-us.com', 'ussvnplesx59.fortinet-us.com', 'FSM-GFU1-Window2022-WIN2022-172-30-56-125', 'ussvnplesx51.fortinet-us.com', 'ussvnplesx53.fortinet-us.com', 'ussvnplesx52.fortinet-us.com', 'ussvnplesx57.fortinet-us.com', 'ussvnplesx55.fortinet-us.com', 'FSM-GFU-Window10-WIN10-172-30-56-127', 'FSM-GFU-Window2016-WIN2016test-172-30-56-126.gfu.com', 'WIN-QA-RDP-230', 'FSM-CPWANG-WIND2019-172-30-56-214', 'WIN-2R27C8ADMT3.fortisiem-lab.net', 'FSM-RPRAJUDHA-CENTOS8-NFS217-172.30.57.217', 'fsm-ntwk-wlan01', 'it-rle-oradb-57141', 'FSM-TTRINH-CENTOS8-KAFKA-172.30.56.34', 'HOST-172.30.56.104']
    print(unique_host_name_list)
    # row count:3549, column count:6
    print(f"row count:{df.shape[0]}, column count:{df.shape[1]}")

    for host_name in unique_host_name_list:
        same_host_name_group_df = df[df['Host Name'] == host_name].reset_index(drop=True)
        print(f"host_name:{host_name}")
        print(f"row count:{same_host_name_group_df.shape[0]}, column count:{same_host_name_group_df.shape[1]}")
        print(same_host_name_group_df['Host Name'])


'''
https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.nunique.html

Count number of distinct elements in specified axis.

Return Series with number of distinct elements. Can ignore NaN values.
'''


def nunique():
    df = pd.DataFrame({'A': [4, 5, 6], 'B': [4, 1, 1]})
    '''
        A    3
        B    2
        dtype: int64
    '''
    print(df.nunique())
    '''
        0    1
        1    2
        2    2
        dtype: int64
    '''
    print(df.nunique(axis=1))


'''
https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html

A groupby operation involves some combination of splitting the object,
applying a function, and combining the results.
This can be used to group large amounts of data and compute operations on these groups.
'''


def groupby():
    df = pd.DataFrame({'Animal': ['Falcon', 'Falcon', 'Parrot', 'Parrot'],
                       'Speed': [380., 370., 24., 26.]})
    print(df)
    df_groupby = df.groupby(['Animal'])

    print(df_groupby.keys)  # ['Animal']
    print(len(df_groupby.groups))  # 2

    print(df_groupby.mean())
    print(df_groupby.sum())


def append():
    input_data = 'Resources/housing.csv'
    df = pd.read_csv(input_data, lineterminator='\n')
    print(df.shape)
    df = df.append(df)
    print(df.shape)
    # ['FSM-GFU-Window2012R2-WIN2012R2-172-30-56-123', 'ussvnplesx54.fortinet-us.com', 'ussvnplesx58.fortinet-us.com', 'ussvnplesx56.fortinet-us.com', 'ussvnplesx59.fortinet-us.com', 'FSM-GFU1-Window2022-WIN2022-172-30-56-125', 'ussvnplesx51.fortinet-us.com', 'ussvnplesx53.fortinet-us.com', 'ussvnplesx52.fortinet-us.com', 'ussvnplesx57.fortinet-us.com', 'ussvnplesx55.fortinet-us.com', 'FSM-GFU-Window10-WIN10-172-30-56-127', 'FSM-GFU-Window2016-WIN2016test-172-30-56-126.gfu.com', 'WIN-QA-RDP-230', 'FSM-CPWANG-WIND2019-172-30-56-214', 'WIN-2R27C8ADMT3.fortisiem-lab.net', 'FSM-RPRAJUDHA-CENTOS8-NFS217-172.30.57.217', 'fsm-ntwk-wlan01', 'it-rle-oradb-57141', 'FSM-TTRINH-CENTOS8-KAFKA-172.30.56.34', 'HOST-172.30.56.104']
    df.to_csv('/Users/yzhao/Downloads/housing_10.csv', index=False)


def to_csv():
    input_data = 'Resources/housing.csv'
    df = pd.read_csv(input_data)
    df.to_csv('/Users/yzhao/Downloads/housing_10.csv', index=False)


if __name__ == '__main__':
    reset_index()
    # nunique()
    # unique()
    # groupby()
    # shape()
    # append()
    # to_csv()
